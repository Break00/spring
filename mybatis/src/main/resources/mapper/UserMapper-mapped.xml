<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--命名空间与Mapper接口全限定名一致-->
<mapper namespace="com.jason.lee.mapper.UserMapper">
    <cache eviction="LRU" flushInterval="6000" readOnly="true" size="200" type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
    <!--
        eviction 缓存回收策略
            LRU（默认）—— 最近最少使用，移除长时间不被使用的对象
            FIFO —— 先进先出，按对象进入缓存的顺序移除
            SOFT —— 软引用，移除基于垃圾回收器状态和软引用规则的对象
            WEAK —— 弱引用，更积极移除基于垃圾回收器状态和软引用规则的对象

        flushInterval 缓存刷新间隔
            缓存多久清空一次，默认不清空，单位毫秒

        readOnly 是否只读
            true —— 只读，mybatis默认所有从缓存中获取数据的操作都是只读，不会修改数据
                    此种情况下会直接将数据在缓存中的引用交给用户，不安全、速度快
            false —— 非只读，mybatis会利用反序列化拷贝一份相同数据交给用户

         size 缓存存放多少元素

         type 自定义缓存的全类名（实现Cache接口）
    -->


    <!--
    id: 唯一标识（与接口中方法名一致）
    resultType: 返回类型
    #{id}: 入参
    -->
    <select id="getUserById" resultType="com.jason.lee.entity.User" useCache="true">
        select * from user where id = #{id}
    </select>

    <select id="getUserByIdAndName" resultType="com.jason.lee.entity.User">
        select * from user where id = #{id} and name = #{name}
    </select>

    <select id="getUsersByName" resultType="com.jason.lee.entity.User">
        select * from user where name like concat('%',#{name},'%')
    </select>

    <select id="getUserMapById" resultType="map">
        select * from user where id = #{id}
    </select>

    <!--resultType将数据库表中的记录封装的类型-->
    <select id="getUserMapsByName" resultType="com.jason.lee.entity.User">
        select * from user where name like concat('%',#{name},'%')
    </select>

    <!--
    parameterType可以省略
    useGeneratedKeys 使用自增主键获取主键值策略
    keyColumn 对应主键属性，mybatis获取主键值将其封装给java bean的哪个属性
    -->
    <insert id="saveUser" parameterType="com.jason.lee.entity.User" useGeneratedKeys="true" keyColumn="id" flushCache="true">
        insert into user (name,age) values (#{name},#{age})
    </insert>

    <update id="updateUser">
        update user set name = #{name},age = #{age} where id = #{id}
    </update>

    <delete id="deleteUserById">
        delete from user where id = #{id}
    </delete>

    <select id="selectAll" resultType="com.jason.lee.entity.User">
        select * from user
    </select>
</mapper>