单个参数：mybatis不会特殊处理
    #{参数名}：取出参数值

多个参数：
    多个参数会被封装成一个map
        key: param1、param2...paramN
        value: 传入的参数值
    #{}就是从map中获取指定的key的值

    【example】
            查询操作：
                User getUserByIdAndName(int id,String name)

                <select id="getUserByIdAndName" resultType="com.jason.lee.entity.User">
                    select * from user where id = #{id} and name = #{name}
                </select>
            异常：
                 org.apache.ibatis.binding.BindingException: Parameter 'id' not found.
                 Available parameters are [arg1, arg0, param1, param2]
            解决方法：
                 1）修改参数名 select * from user where id = #{param1} and name = #{param2}
                 2）命名参数 User getUserByIdAndName(@Param("id") int id, @Param("name") String name);
                 3）如果多个参数正好是业务逻辑的数据模型，可以直接传入对应的POJO，#{属性名}取出POJO的属性值
                 4）将参数包装成map，#{key}取出对应的value
                 5）利用DTO封装参数

============================================================================
public User getUser(@Param("id") int id, String name)
取值： id==>#{id/param1}  name==>#{param2}

public User getUser(int id, User user)
取值： id==>#{param1}  name==>#{param2.name}

如果参数是Collection（List、Set）类型或数组，mybatis也会封装成map
key: Collection（collection），如果是List还可以使用这个key（list），数组（array）
public User getUserById(List<Integer> ids)
取值: 取出第一个id的值 #{list[0]}

ParamNameResolver入参解析
public Object getNamedParams(Object[] args) {
    int paramCount = this.names.size();
    if (args != null && paramCount != 0) {
        if (!this.hasParamAnnotation && paramCount == 1) {
            return args[(Integer)this.names.firstKey()];
        } else {
            Map<String, Object> param = new ParamMap();
            int i = 0;

            for(Iterator var5 = this.names.entrySet().iterator(); var5.hasNext(); ++i) {
                Entry<Integer, String> entry = (Entry)var5.next();
                param.put(entry.getValue(), args[(Integer)entry.getKey()]);
                String genericParamName = "param" + String.valueOf(i + 1);
                if (!this.names.containsValue(genericParamName)) {
                    param.put(genericParamName, args[(Integer)entry.getKey()]);
                }
            }

            return param;
        }
    } else {
        return null;
    }
}
============================================================================
#{}：以预编译的形式将参数设置到sql语句中
${}：取出值直接拼装到sql中，原生jdbc不支持占位符的地方可以使用${}取值
     select * from tb order by ${name}


