@Configuration  //配置类==Spring配置文件
@ComponentScan("com.jason.lee.annotation")  //可以自定义需要扫描的或排除的包、类
@Bean(name = "person") // 向Spring容器注册Bean，类型为方法返回值类型，id默认为方法名
@Lazy // 懒加载  针对singleton，容器启动时不创建Bean，第一次使用时创建并初始化
@Scope("prototype") // 默认singleton IOC容器启动时创建对象 （单例）  // prototype 获取时创建对象
@Conditional 按照一定的条件判断，满足条件向容器注册Bean  (注解在类或方法上)

#############【注册组件】#############
1、包扫描 + 组件标注注解（@Controller、@Service、@Repository、@Component）
2、@Bean[导入第三方包中的组件]
3、@Import[快速导入组件]
    1）、@Import(Student.class)  //快速导入组件，id是默认全限定名
    2）、ImportSelector  //返回值就是导入容器的组件全类名
    3）、ImportBeanDefinitionRegistrar  //自定义注入Bean
4、使用Spring提供的FactoryBean（工厂Bean）
    // 实现FactoryBean接口


#############【Bean的生命周期】#############

【创建】
    单实例，在容器启动时创建对象
    多实例，在每次获取时创建对象
【初始化】
    对象创建完，对属性赋值，调用初始化方法
【销毁】
    单实例，容器关闭时
    多实例，容器不会管理多实例Bean，容器不会调用销毁方法

1）、指定初始化和销毁方法
        // @Bean(initMethod = "init", destroyMethod = "destroy")
2）、自定义Bean实现InitializingBean接口（初始化逻辑），实现DisposableBean接口（销毁逻辑）
        // public class Dog implements InitializingBean, DisposableBean
3）、@PostConstruct（初始化），@PreDestroy（销毁）

4）、BeanPostProcessor：后置处理器
        // postProcessBeforeInitialization：初始化方法执行之前
        // postProcessAfterInitialization：初始化方法执行之后
        ***Spring底层BeanPostProcessor的应用***

#############【Bean注入】#############
1）、@Value属性赋值
        // @Value("lee")
        // @Value("${people.nickName}")  从properties中获取值
        // @Value("#{20-2}")

2）、自动注入  AutowiredAnnotationBeanPostProcessor解析完成自动装配功能
    @Autowired   默认类型装配，若存在多个相同类型的组件，再将属性名作为id去装配 【可以用在构造器、方法、方法参数、属性，默认使用容器中的Bean】
        @Qualifier 搭配@Autowired使用,指定组件id
    @Resource java规范，默认按名称装配--->按类型装配
    @Inject java规范

3）、自定义组件使用Spring底层的组件（ApplicationContext、BeanFactory...）
        自定义组件实现XXXAware：在创建对象时，调用接口规定的方法注入相关的组件
                // ApplicationContextAware、BeanNameAware、ServletConfigAware...  （由XXXAwareProcessor完成）


#############【环境切换】#############
@Profile:
    Spring提供的可以根据当前环境，动态的激活和切换一系列组件的功能 【可以用在类、Bean组件上】

    @Profile("test")、 @Profile("dev")
    激活方式：
        虚拟机参数：-Dspring.profiles.active=dev
        代码方式： applicationContext.getEnvironment().setActiveProfiles("test");


#############【AOP的使用】#############
1、将业务逻辑组件和切面类都加入到容器中，@Aspect注解标注切面类
2、切面类中定义通知 @Before、 @After、 @AfterReturning、 @AfterThrowing、@Around，并定义切入点 @Pointcut
3、开启基于注解的AOP模式 @EnableAspectJAutoProxy


#############【AOP的原理】#############
1、@EnableAspectJAutoProxy 开启AOP功能
    @Import(AspectJAutoProxyRegistrar.class)  向容器中导入AspectJAutoProxyRegistrar组件
        利用AspectJAutoProxyRegistrar自定义给容器注册Bean：
                id：org.springframework.aop.config.internalAutoProxyCreator
                类型：AnnotationAwareAspectJAutoProxyCreator
2、AnnotationAwareAspectJAutoProxyCreator 后置处理器
    容器启动时：
        1）、registerBeanPostProcessors注册后置处理器，创建AnnotationAwareAspectJAutoProxyCreator对象
        2）、finishBeanFactoryInitialization创建剩下的实例
            [1] 创建业务逻辑组件和切面组件
            [2] AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程
            [3] 组件创建完，判断组件是否需要增强 postProcessAfterInitialization.wrapIfNecessary
                    需要增强：將切面的通知方法包装成增强器（Advisor），并创建代理对象
        3）、执行目标方法
             代理对象执行目标方法
                CglibAopProxy.intercept()获取目标方法的拦截器链，利用拦截器链的链式机制依次进入拦截器执行
                    [1] 正常：前置通知->目标方法->后置通知->返回通知
                    [2] 异常：前置通知->目标方法->后置通知->异常通知



#############【事务的原理】#############
1、@EnableTransactionManagement   // 开启基于注解的事务管理功能
        利用TransactionManagementConfigurationSelector向容器注册组件
            AutoProxyRegistrar
            ProxyTransactionManagementConfiguration
2、AutoProxyRegistrar
        注册InfrastructureAdvisorAutoProxyCreator （后置处理器）
        利用后置处理器机制在对象创建之后包装对象，返回一个代理对象（增强器）
3、ProxyTransactionManagementConfiguration
        注册事务增强器：
                1）、事务增强器要用事务注解的信息：AnnotationTransactionAttributeSource解析事务注解
                2）、事务拦截器：TransactionInterceptor 保存了事务的属性信息，事务管理器
                        目标方法执行时：先获取事务相关的属性；
                                       再获取PlatformTransactionManager；
                                       执行目标方法（如果异常，获取事务管理器进行回滚）

#############【扩展】#############
BeanPostProcessor：bean创建对象初始化前后进行拦截工作
【1】BeanFactoryPostProcessor：在BeanFactory标准初始化之后调用，所有的bean定义已经保存加载到beanFactory，此时bean实例未创建
      1、IOC容器创建
      2、invokeBeanFactoryPostProcessors(beanFactory)，执行BeanFactoryPostProcessor
              如何找到所有的BeanFactoryPostProcessor并执行其方法
                  1）、在beanFactory中找到所有BeanFactoryPostProcessor的组件，并执行
                          beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false)
                  2）、在初始化创建其他组件之前

 BeanDefinitionRegistryPostProcessor：优于BeanFactoryPostProcessor执行，可以利用该接口向容器增加组件


【2】ApplicationListener：监听容器中发布的事件，事件驱动开发
      1）、创建监听器监听事件（ApplicationEvent及其下面的子事件）
           或使用 @EventListener：
                                    使用EventListenerMethodProcessor处理器解析方法上的@EventListener
                                            1]、创建容器并refresh()
                                            2]、finishBeanFactoryInitialization(beanFactory) 初始化剩下的单实例Bean
                                                    1）、先创建所有的单实例Bean：getBean(beanName)
                                                    2）、获取所有创建完成的单实例Bean，判断是否是SmartInitializingSingleton类型
                                                            如果是就调用afterSingletonsInstantiated方法根据注解信息创建listener加入容器
      2）、监听器加入容器
      3）、只要容器中相关事件发布，监听器就能作用
              ContextRefreshedEvent：容器刷新完成（所有bean完全创建）
              ContextClosedEvent：关闭容器
      4）、发布事件
             applicationContext.publishEvent

             事件发布publishEvent(..)
                           发布流程：
                               1）、获取事件多播器（派发器）getApplicationEventMulticaster()
                                        事件多播器ApplicationEventMulticaster
                                                  1、创建容器，refresh()
                                                  2、initApplicationEventMulticaster()：初始化ApplicationEventMulticaster
                               2）、multicastEvent派发事件
                                       获取所有的ApplicationListener： 1、如果有Executor，可以异步派发
                                                                      2、否则同步直接执行listener方法


Spring容器启动refresh():
====================================BeanFactory的创建及预处理工作=======================================
	1、prepareRefresh()刷新前预处理
		1)、initPropertySources()，初始化属性设置
		2)、getEnvironment().validateRequiredProperties()，验证属性可解析
		3)、earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>()，保存容器中一些早期事件

	2、obtainFreshBeanFactory()获取BeanFactory
		1)、refreshBeanFactory()刷新BeanFactory，设置序列化Id
		2)、getBeanFactory()返回GenericApplicationContext创建的BeanFactory对象【DefaultListableBeanFactory】

	3、prepareBeanFactory(beanFactory)预处理
		设置BeanFactory的类加载器、支持表达式解析器...

	4、postProcessBeanFactory(beanFactory)，BeanFactory准备工作完成后进行的后置处理
		子类可以重写此方法
========================================================================================================
	5、invokeBeanFactoryPostProcessors(beanFactory)，执行BeanFactoryPostProcessor
		在BeanFactory标准初始化后执行：
				BeanFactoryPostProcessor
				BeanDefinitionRegistryPostProcessor：优于BeanFactoryPostProcessor执行

	6、registerBeanPostProcessors(beanFactory)，注册BeanPostProcessor【intercept bean creation】

		不同类型的BeanPostProcessor在Bean创建前后的执行时机不同
		BeanPostProcessor顶级接口
		DestructionAwareBeanPostProcessor
		InstantiationAwareBeanPostProcessor
		SmartInstantiationAwareBeanPostProcessor
		MergedBeanDefinitionPostProcessor：存放在internalPostProcessors

		1)、获取所有的BeanPostProcessor，后置处理器可以通过PriorityOrdered、Ordered指定优先级
		2)、注册PriorityOrdered优先级接口的BeanPostProcessor
				beanFactory.addBeanPostProcessor(postProcessor)
		3)、注册Ordered优先级接口的BeanPostProcessor
		4)、注册无优先级接口的BeanPostProcessor
		5)、注册MergedBeanDefinitionPostProcessor
		6)、最终注册ApplicationListenerDetector
			    在Bean创建完成后检查是否是ApplicationListener，如果是则添加到applicationContext

	7、initMessageSource()，初始化MessageSource组件（国际化功能、消息绑定、消息解析）
		1)、获取BeanFactory
		2)、判断是否存在messageSource组件，没有则创建DelegatingMessageSource并注册到容器中

	8、initApplicationEventMulticaster()，初始化事件派发器
		1)、获取BeanFactory
		2)、从BeanFactory中获取ApplicationEventMulticaster，没有则创建SimpleApplicationEventMulticaster并添加到BeanFactory中

	9、onRefresh()预留给子类重写，在容器刷新时自定义逻辑

	10、registerListeners()注册监听器
		1)、从容器中获取所有的ApplicationListener
		2)、将监听器添加到事件派发器中
				getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName)
		3)、派发之前步骤产生的事件

	11、finishBeanFactoryInitialization(beanFactory)初始化所有剩下的单实例Bean
			beanFactory.preInstantiateSingletons()初始化
				获取容器中所有的Bean，依次进行创建对象、初始化
					对于非懒加载的非工厂单实例Bean创建过程如下：
						1)、getBean(beanName)
						2)、doGetBean(name, null, null, false)
						3)、getSingleton(beanName)
							尝试从缓存中获取对象private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256)
						4)、缓存获取失败，开始Bean的创建
						5)、标记当前Bean已经被创建
						6)、获取Bean的定义信息
						7)、获取当前Bean依赖的其他Bean，如果有按照getBean(dep)将依赖的对象创建出来
						8)、启动单实例Bean的创建流程：
								1]、createBean(beanName, mbd, args)
								2]、Object bean = resolveBeforeInstantiation(beanName, mbdToUse)
										利用后置处理器InstantiationAwareBeanPostProcessor创建代理对象
											先触发postProcessBeforeInstantiation
											如果有返回值触发postProcessAfterInstantiation

								3]、doCreateBean(beanName, mbdToUse, args)（如果没有返回代理对象）
										1}、createBeanInstance(beanName, mbd, args)创建实例
											利用工厂方法或者对象的构造器创建Bean实例
										2}、applyMergedBeanDefinitionPostProcessors
											调用MergedBeanDefinitionPostProcessor
												bdp.postProcessMergedBeanDefinition(mbd, beanType, beanName)
										3}、populateBean(beanName, mbd, instanceWrapper)属性赋值
											获取InstantiationAwareBeanPostProcessor后置处理器
												执行postProcessAfterInstantiation
											获取InstantiationAwareBeanPostProcessor后置处理器
												执行postProcessPropertyValues
											applyPropertyValues(beanName, mbd, bw, pvs)属性赋值
										4}、initializeBean(beanName, exposedObject, mbd)初始化
											1、invokeAwareMethods(beanName, bean)执行xxxAware接口的方法
											2、applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName)
											   执行BeanPostProcessor的postProcessBeforeInitialization
											3、invokeInitMethods(beanName, wrappedBean, mbd)执行自定义初始化方法
											4、applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName)
											   执行BeanPostProcessor的postProcessAfterInitialization
										5}、registerDisposableBeanIfNecessary(beanName, bean, mbd)
											注册销毁方法
								4]、将创建的Bean添加到singletonObjects
						9)、所有Bean创建完成后，检查所有Bean是否是SmartInitializingSingleton，是则执行afterSingletonsInstantiated方法

	12、finishRefresh()完成BeanFactory的初始化创建工作
		1)、initLifecycleProcessor()初始化和生命周期有关的后置处理器LifecycleProcessor
		2)、getLifecycleProcessor().onRefresh()触发LifecycleProcessor的onRefresh方法
		3)、publishEvent(new ContextRefreshedEvent(this))发布容器刷新完成事件，回调监听器方法
		4)、LiveBeansView.registerApplicationContext(this)

========================================================================================================
1、Spring容器启动时，会先保存所有注册进来的Bean定义信息
	1)、xml定义
	2)、注解定义
2、Spring创建Bean
	1)、用到这个Bean时，利用getBean创建Bean并保存到容器
	2)、利用finishBeanFactoryInitialization(beanFactory)统一创建剩下所有的Bean
3、后置处理器
		每一个Bean创建完成，都会使用后置处理器进行处理，来增强Bean的功能
			AutowiredAnnotationBeanPostProcessor：处理自动注入
			AnnotationAwareAspectJAutoProxyCreator：AOP
			......
4、事件驱动模型
	ApplicationListener：事件监听器
    ApplicationEventMulticaster：事件多播器
